/* 
 * AP(r) Computer Science GridWorld Case Study:
 * Copyright(c) 2005-2006 Cay S. Horstmann (http://horstmann.com)
 *
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * @author Cay Horstmann
 */

import java.awt.Color;

import info.gridworld.actor.ActorWorld;
import info.gridworld.actor.Bug;
import info.gridworld.actor.Rock;
import info.gridworld.grid.UnboundedGrid;
import info.gridworld.world.World;




/**
 * This class runs a world that contains a bug and a rock, added at random
 * locations. Click on empty locations to add additional actors. Click on
 * populated locations to invoke methods on their occupants. <br />
 * To build your own worlds, define your own actors and a runner class. See the
 * BoxBugRunner (in the boxBug folder) for an example. <br />
 * This class is not tested on the AP CS A and AB exams.
 */
public class BugRunner
{
    public static void main(String[] args)
    {
    	ActorWorld world = new ActorWorld(new UnboundedGrid());
        Bug redBug = new Bug();
        //world.add(redBug);
        System.out.println(redBug.getLocation());
        System.out.println(redBug.canMove());        
        
        
        world.add(new Rock());
        world.show();
        
       /* Bug buggy = new Bug();
        world.add(buggy);
        moveBug(buggy, 12);
                
        
        Color blau = new Color(100,50,255);
        Color gruen = new Color(100,255,125);
        Bug randBuggy = new Bug();
        Bug grBuggy = new Bug();
        Bug colBuggy = new Bug();
        grBuggy.setColor(gruen);
        randBuggy.setColor(Color.blue);
        world.add(randBuggy);
        world.add(grBuggy);
        world.add(colBuggy);
        randomBug(randBuggy, 5000);
        randomBug(grBuggy, 1000);
        colorBug(colBuggy);
        */
        
        
        Bug mBug = new Bug();
        world.add(mBug);
        int x = mBug.getLocation().getRow();
    	int y = mBug.getLocation().getCol();
    	x = x%255;
    	y = y%255;
    	Color mBugColor = new Color(x,0,y);
    	mBug.setColor(mBugColor);
        
        makeBugs(mBug, 5);
        
        
        
    }
    
    public static void moveBug(Bug buggy, int n){
    	if(buggy.canMove()){
    		if(n>0){
    			buggy.move();
    			moveBug(buggy , n-1);
    		}
    	}
    	else{
    		buggy.turn();
    		moveBug(buggy, n-1);
    	}
    }
    
    public static void randomBug(Bug randBuggy, int n){
    	
    	double r= Math.random()*100; 
        if(0 <= r && r <= 24)
        	r = 0;
        else if(25 <= r && r <= 49)
        	r=90;
        else if(50 <= r && r <= 74)
        	r= 180;
        else
        	r=270;
        
    	randBuggy.setDirection((int)r);
    	
    	if(randBuggy.canMove()==true){
    		if(n>0){
    			randBuggy.move();
    			randomBug(randBuggy, n-1);
    		}
    	}
    }
    
    public static void colorBug(Bug colBuggy){
    	System.out.println(colBuggy.getLocation());
    	colBuggy.setColor(Color.cyan);
    	
    }
    
    public static void makeBugs(Bug mBug, int n){
    	/*int x = mBug.getLocation().getRow();
    	int y = mBug.getLocation().getCol();
    	x = x%255;
    	y = y%255;
    	Color mBugColor = new Color(x,0,y);
    	mBug.setColor(mBugColor);*/
    	if(n>0){
    		makeBugs(mBug, n-1);
    	}
    }
}
