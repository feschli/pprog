package assignment3;

import java.awt.image.BufferedImage;
import java.util.Set;
import java.util.Random;
import java.util.HashSet;

public class Scene {
	// Implement
	
	Random random = new Random();

	Camera camera;
	int imageWidth;
	int imageHeight;
	Set<Sphere> spheres = new HashSet<Sphere>();

	public Scene(Camera camera, int imageWidth, int imageHeight) {
		// Implement
		this.camera = camera;
		this.imageHeight = imageHeight;
		this.imageWidth = imageWidth;
	}

	public void addSphere(Sphere sphere) {
		// Implement
		spheres.add(sphere);
	}

	/**
	 * Get the closest {@link Sphere} that intersects with the given ray.
	 * 
	 * @param ray
	 *            The ray to shoot at shapes.
	 * @return An {@link Intersection} object to store shape and distance or
	 *         <code>null</code> if no intersection has been found.
	 */
	public Intersection intersect(Ray ray) {
		// Implement
		Sphere s0 = null;
		double t0 = Double.MAX_VALUE;

		for (Sphere sphere : spheres) {
			double t = sphere.intersect(ray);
			if (sphere.intersect(ray) == t && t < t0) {
				s0 = sphere;
				t0 = t;
			}
		}

		return new Intersection(s0, t0);
	}

	/**
	 * Get a ray from the camera through pixels identified by <code>i</code> and
	 * <code>j</code>.
	 * 
	 * @param i
	 *            The pixel (0-based) on the width of the picture.
	 * @param j
	 *            The pixel (0-based) on the height of the picture.
	 * @return A new ray from the camera through the pixel.
	 */
	public Ray getCameraRay(int i, int j) {
		// Implement
		final Vector origin = camera.getEye().start;
		Vector w = camera.getEye().direction.normalize().smult(-1);
		Vector u = camera.getUp().cross(w).normalize();
		Vector v = w.cross(u);

		double u0 = -1;
		double v0 = -1;
		double u1 = 1;
		double v1 = 1;
		double s = 2;

		Vector a = u.smult(u1 - u0);
		Vector b = v.smult(v1 - v0);
		Vector c = origin.plus(u.smult(u0)).plus(v.smult(v0)).minus(w.smult(s));

		double wp = 1. * i / imageWidth;
		double hp = 1. * j / imageHeight;

		Vector screen = c.plus(a.smult(wp)).plus(b.smult(hp));

		return new Ray(origin, screen.minus(origin).normalize());

	}

	/**
	 * Compute the light at some ray. Performs intersection tests and recursive
	 * sampling of up to {@link #MAX_DEPTH} ({@value #MAX_DEPTH}) levels.
	 * 
	 * @param ray
	 *            The ray to compute the light for.
	 * @param depth
	 *            The current recursion depth.
	 * @return The color encoded as vector.
	 */
	public Vector getLight(Ray ray, int depth) {
		Intersection intersection = intersect(ray);
		if (intersection != null) {
			final Sphere sphere = intersection.sphere;
			if (depth > 5) {
				return sphere.emission;
			}

			double r1 = 2.0 * Math.PI * random.nextDouble();
			double r2 = random.nextDouble();

			Vector x = ray.direction.plus(
					ray.direction.smult(intersection.t));
			Vector n = x.minus(sphere.position).normalize();
			Vector n1 = n.dot(ray.direction) < 0.0 ? n : n.smult(-1.);

			Vector w = n1;
			Vector u = new Vector(1, 0, 0).cross(w).normalize();
			Vector v = w.cross(u);

			Vector d = u.smult(Math.cos(r1) * Math.sin(r2))
					.plus(v.smult(Math.sin(r1) * Math.sin(r2)))
					.plus(w.smult(Math.cos(r2))).normalize();
			return sphere.emission.plus(
					sphere.color.mul(getLight(new Ray(x, d), depth + 1)));
		} else {
			return Vector.VEC_ZERO;
		}
	}


	public void raytrace(final BufferedImage image, final int samples) {
		// Implement
	}
}
