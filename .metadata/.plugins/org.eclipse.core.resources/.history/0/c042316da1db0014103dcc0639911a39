package exercise2;

import java.util.Random;
import java.util.concurrent.*;

public class ParaProgTest {
	
	public static void main(String[] args){
		
		int[] array = new int[10];
		RecSum test1 = new RecSum(array);
		
		fillArray(test1.getArr());
		
		printArray(test1.getArr());
		
		System.out.println();
		System.out.println();
		
		long starts = System.nanoTime();
		int seqSum = test1.sum();
		long ends = System.nanoTime();

		System.out.println("The sum (sequential) of the array is "+seqSum+" and the time was "+(ends-starts)+"ns");
		
		long startr = System.nanoTime();
		int reqSum = test1.recSum(test1.getArr(),0,test1.getArr().length);
		long endr = System.nanoTime();

		System.out.println("The sum (recursive) of the array is "+reqSum+" and the time was "+(endr-startr)+"ns");
		
		ExecutorService exs = Executors.newFixedThreadPool(1);
		
		long startp = System.nanoTime();
		
		exs.submit(test1);
		
		exs.shutdown();
		
		long endp = System.nanoTime();
		
		
		
		System.out.println("The sum (parallel) of the array is " + test1.getRes()+" and the time was "+(endp-startp)+"ns");
		
		
	}
	

	public static void fillArray(int[] array){
		Random rand = new Random();
		
		for (int i = 0; i < array.length; i++) {
			array[i] = rand.nextInt((int) 10e12);
		}
	}	
	
	public static void printArray(int[] array){
		for (int i = 0; i < array.length; i++) {
			System.out.print(array[i]+" ");
		}
	}

}


class RecSum implements Runnable{
	
	private final int[] arr;
	private int res;

	public RecSum(int[] arr) {
		this.arr = arr;
	}

	public int[] getArr() {
		return this.arr;
	}
	
	public int getRes(){
		return this.res;
	}
	
	public int sum(){
		int result=0;
		
		for (int i = 0; i < arr.length; i++) {
			result = result + arr[i];
		}
		return result;
	}
	
	public int recSum(int[] array,int lo, int hi){
		int size = hi-lo;
		
		if (size == 1)
			return array[lo];
		
		int mid = size/2;
		
		int res1 = recSum(array,lo,lo+mid);
		int res2 = recSum(array,lo+mid,hi);
		return res1 +res2;
	}
	
	public void run() {
		
		for (int i = 0; i < arr.length; i++) {
			res = res + arr[i];
		}
	}
}